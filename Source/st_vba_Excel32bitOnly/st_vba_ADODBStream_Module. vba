'--------------------------------------------------
'st_vba
'--------------------------------------------------
'ModuleName:    ADODBStream Module
'ObjectName:    st_vba_ADODBStream
'--------------------------------------------------
'Version:       2017/07/02
'--------------------------------------------------
'   ・  Win7 64bit版 Excel2016 64bit版で
'       ADODB.Streamが32bit版にリンクしてしまい
'       正しく動作しない場合があったために分離
'   ・  参照設定を次のように設定しても
'           Microsoft AxtiveX Data Objects 6.1 Library
'           C:\Program Files\Common Files\System\ado\msado15.dll
'       次のように勝手に修正されて動作不具合を起こしていた
'           C:\Program Files (x86)\Common Files\System\ado\msado15.dll
'--------------------------------------------------
Option Explicit

'----------------------------------------
'◆テキストファイル読み書き
'----------------------------------------

Public Function CheckEncodeName(EncodeName As String) As Boolean
   CheckEncodeName = OrValue(UCase$(EncodeName), _
       "SHIFT_JIS", _
       "UNICODE", "UNICODEFFFE", "UTF-16", _
       "UTF-16LE", _
       "UNICODEFEFF", _
       "UTF-16BE", _
       "UTF-8", _
       "ISO-2022-JP", _
       "EUC-JP", _
       "UTF-7")
End Function

'----------------------------------------
'・テキストファイル読込
'----------------------------------------
'   ・  エンコード指定は下記の通り
'           エンコード          指定文字
'           ShiftJIS            SHIFT_JIS
'           UTF-16LE BOM有/無   UNICODEFFFE/UNICODE/UTF-16/UTF-16LE
'                               BOMの有無に関わらず読込可能
'           UTF-16BE _BOM_ON    UNICODEFEFF
'           UTF-16BE _BOM_OFF   UTF-16BE
'           UTF-8 BOM有/無      UTF-8/UTF-8N
'                               BOMの有無に関わらず読込可能
'           JIS                 ISO-2022-JP
'           EUC-JP              EUC-JP
'           UTF-7               UTF-7
'   ・  UTF-16LEとUTF-8は、BOMの有無にかかわらず読み込める
'----------------------------------------
Public Function ADOStream_LoadTextFile( _
ByVal TextFilePath As String, ByVal EncodeName As String) As String
   If CheckEncodeName(EncodeName) = False Then
       Call Assert(False, "Error:ADOStream_LoadTextFile")
   End If

   Dim ADOStream As ADODB.Stream
   Set ADOStream = New ADODB.Stream
   ADOStream.Type = adTypeText
   ADOStream.Charset = EncodeName
   ADOStream.Open
   ADOStream.LoadFromFile (TextFilePath)
   ADOStream_LoadTextFile = ADOStream.ReadText
   ADOStream.Close
End Function

'----------------------------------------
'・テキストファイル保存
'----------------------------------------
'   ・  エンコード指定は下記の通り
'           エンコード          指定文字
'           ShiftJIS            SHIFT_JIS
'           UTF-16LE _BOM_ON    UNICODEFFFE/UNICODE/UTF-16
'           UTF-16LE _BOM_OFF    UTF-16LE
'           UTF-16BE _BOM_ON    UNICODEFEFF
'           UTF-16BE _BOM_OFF    UTF-16BE
'           UTF-8 _BOM_ON       UTF-8
'           UTF-8 _BOM_OFF       UTF-8N
'           JIS                 ISO-2022-JP
'           EUC-JP              EUC-JP
'           UTF-7               UTF-7
'   ・  UTF-16LEとUTF-8はそのままだと_BOM_ONになるので
'       BON無し指定の場合は特殊処理をしている
'----------------------------------------
Public Sub ADOStream_SaveTextFile(ByVal Text As String, _
ByVal TextFilePath As String, ByVal EncodeName As String, _
Optional ByVal BOM As Boolean = True)
   If CheckEncodeName(EncodeName) = False Then
       Call Assert(False, "Error:ADOStream_LoadTextFile")
   End If

   Dim ADOStream As New ADODB.Stream
   ADOStream.Type = adTypeText
   ADOStream.Charset = EncodeName
   ADOStream.Open
   Call ADOStream.WriteText(Text)

   Dim ByteData() As Byte
   Select Case UCase$(EncodeName)
   Case "UNICODE", "UNICODEFFFE", "UTF-16LE", "UTF-16"
       If BOM = False Then
           ADOStream.Position = 0
           ADOStream.Type = adTypeBinary
           ADOStream.Position = 2
           ByteData = ADOStream.Read
           ADOStream.Close
           ADOStream.Open
           Call ADOStream.Write(ByteData)
       End If
   Case "UTF-8"
       If BOM = False Then
           ADOStream.Position = 0
           ADOStream.Type = adTypeBinary
           ADOStream.Position = 3
           ByteData = ADOStream.Read
           ADOStream.Close
           ADOStream.Open
           Call ADOStream.Write(ByteData)
       End If
   End Select
   Call ADOStream.SaveToFile(TextFilePath, adSaveCreateOverWrite)
   ADOStream.Close
End Sub

'----------------------------------------
'◇テキストファイル読み書き Enum指定版
'----------------------------------------
'   ・  ADODB.Stream が許容する文字列は次の通り
'           使用可能文字列                  エンコード
'           SHIFT_JIS
'           UNICODEFFFE/UNICODE/UTF-16      UTF-16LE_BOM_ON
'           UTF-16LE                        UTF-16LE_BOM_OFF
'           UNICODEFEFF                     UTF-16BE_BOM_ON
'           UTF-16BE                        UTF-16BE_BOM_OFF
'           UTF-8
'           ISO-2022-JP
'           EUC-JP
'           UTF-7
'       このうち、変わった挙動をするのは UTF-16LE と UFT-8
'
'       UTF-16LEは、読み込み時に指定すると
'       テキストファイルが UTF-16LE のBOMありなし関わらず読み込み可能
'       これは特に問題にはならないのだが
'       書き込み時に UTF-16LE を指定しても
'       BOMありとして書き込まれてしまう。
'       つまり、UTF-16LEは UNICODEFFFE/UNICODE/UTF-16 と同じ機能になる
'       それでは機能不足なので、String_SaveToFile ではBOMを除外する処理をしている。
'
'       UFT-8は、常にBOMありとして書き込まれる。
'       BOM無しのUTF-8なんて世の中に存在しない方がいいのだが
'       そうはいっても、UTF-8BOM無しで出力したい場合もあるので
'       ADODB.Stream はBOM無しUTF-8を許容しないのだが
'       UFT-8N という文字列によって
'       UTF-8のBOMなしの文字として表現して、
'       String_SaveToFile ではBOMを除外する処理をしている。
'----------------------------------------
Public Function GetEncodingTypeJpCharCode( _
ByVal EncodingTypeName As String) As EncodingTypeJpCharCode

   Dim Result As EncodingTypeJpCharCode
   Result = EncodingTypeJpCharCode.NONE
   Select Case UCase(EncodingTypeName)
   Case "SHIFT_JIS"
       Result = EncodingTypeJpCharCode.Shift_JIS

   Case "UNICODE", "UNICODEFFFE", "UTF-16"
       Result = EncodingTypeJpCharCode.UTF16_LE_BOM
   Case "UTF-16LE"
       Result = EncodingTypeJpCharCode.UTF16_LE_BOM_NO

   Case "UNICODEFEFF"
       Result = EncodingTypeJpCharCode.UTF16_BE_BOM
   Case "UTF-16BE"
       Result = EncodingTypeJpCharCode.UTF16_BE_BOM_NO

   Case "UTF-8"
       Result = EncodingTypeJpCharCode.UTF8_BOM
   Case "UTF-8N"
       Result = EncodingTypeJpCharCode.UTF8_BOM_NO

   Case "ISO-2022-JP"
       Result = EncodingTypeJpCharCode.JIS

   Case "EUC-JP"
       Result = EncodingTypeJpCharCode.EUC_JP

   Case "UTF-7"
       Result = EncodingTypeJpCharCode.UTF_7

   End Select

End Function


Public Function GetEncodingTypeName( _
ByVal EncodingType As EncodingTypeJpCharCode) As String
   Dim Result As String: Result = ""

   Select Case EncodingType
   Case EncodingTypeJpCharCode.Shift_JIS
       Result = "SHIFT_JIS"

   Case EncodingTypeJpCharCode.UTF16_LE_BOM
       Result = "UNICODEFFFE"
   Case EncodingTypeJpCharCode.UTF16_LE_BOM_NO
       Result = "UTF-16LE"

   Case EncodingTypeJpCharCode.UTF16_BE_BOM
       Result = "UNICODEFEFF"
   Case EncodingTypeJpCharCode.UTF16_BE_BOM_NO
       Result = "UTF-16BE"

   Case EncodingTypeJpCharCode.UTF8_BOM
       Result = "UTF-8"
   Case EncodingTypeJpCharCode.UTF8_BOM_NO
       Result = "UTF-8N"

   Case EncodingTypeJpCharCode.JIS
       Result = "ISO-2022-JP"

   Case EncodingTypeJpCharCode.EUC_JP
       Result = "EUC-JP"

   Case EncodingTypeJpCharCode.UTF_7
       Result = "UTF-7"

   End Select
   GetEncodingTypeName = Result
End Function

Public Function String_LoadFromFile( _
ByVal FilePath As String, _
ByVal EncodingType As EncodingTypeJpCharCode) As String

   Dim EncordingName As String
   EncordingName = GetEncodingTypeName(EncodingType)
   Call Assert(EncordingName <> "", "Error:Encoding No Select")

   Dim Stream As New ADODB.Stream
   Stream.Type = adTypeText
   Select Case EncodingType
   Case EncodingTypeJpCharCode.UTF8_BOM_NO
       Stream.Charset = GetEncodingTypeName(EncodingTypeJpCharCode.UTF8_BOM)
   Case Else
       Stream.Charset = EncordingName
   End Select
   Stream.Open
   Stream.LoadFromFile (FilePath)
   String_LoadFromFile = Stream.ReadText
   Stream.Close

End Function

Public Sub testString_LoadFromFile()
   Dim FolderPath As String
   FolderPath = PathCombine( _
       ThisWorkbook.Path, "Test", "ADOStream")
   Call ForceCreateFolder(FolderPath)

   Call Assert("Shift-JIS ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_Shift-JIS.txt"), _
           EncodingTypeJpCharCode.Shift_JIS))

   Call Assert("UTF-16LE-BOM ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-16LE-BOM.txt"), _
           EncodingTypeJpCharCode.UTF16_LE_BOM))
   Call Assert("UTF-16LE-BOM-NO ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-16LE-BOM-NO.txt"), _
           EncodingTypeJpCharCode.UTF16_LE_BOM_NO))

   Call Assert("UTF-16BE-BOM ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-16BE-BOM.txt"), _
           EncodingTypeJpCharCode.UTF16_BE_BOM))
   Call Assert("UTF-16BE-BOM-NO ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-16BE-BOM-NO.txt"), _
           EncodingTypeJpCharCode.UTF16_BE_BOM_NO))

   Call Assert("UTF-8-BOM ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-8-BOM.txt"), _
           EncodingTypeJpCharCode.UTF8_BOM))
   Call Assert("UTF-8-BOM-NO ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-8-BOM-NO.txt"), _
           EncodingTypeJpCharCode.UTF8_BOM_NO))

   Call Assert("JIS ISO-2022-JP ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_JIS.txt"), _
           EncodingTypeJpCharCode.JIS))

   Call Assert("EUC-JP ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_EUC-JP.txt"), _
           EncodingTypeJpCharCode.EUC_JP))

   Call Assert("UTF-7 ＡＢＣ１２３" = _
       String_LoadFromFile( _
           PathCombine(FolderPath, "test_UTF-7.txt"), _
           EncodingTypeJpCharCode.UTF_7))
End Sub

Public Sub String_SaveToFile( _
ByVal Text As String, _
ByVal FilePath As String, _
ByVal EncodingType As EncodingTypeJpCharCode)

   Dim EncordingName As String
   EncordingName = GetEncodingTypeName(EncodingType)
   Call Assert(EncordingName <> "", "Error:Encoding No Select")

   Dim Stream As New ADODB.Stream
   Stream.Type = adTypeText
   Select Case EncodingType
   Case EncodingTypeJpCharCode.UTF8_BOM_NO
       Stream.Charset = GetEncodingTypeName(EncodingTypeJpCharCode.UTF8_BOM)
   Case Else
       Stream.Charset = EncordingName
   End Select
   Stream.Open
   Call Stream.WriteText(Text)

   Dim ByteData() As Byte
   Select Case EncodingType
   Case EncodingTypeJpCharCode.UTF16_LE_BOM_NO
       Stream.Position = 0
       Stream.Type = adTypeBinary
       Stream.Position = 2
       ByteData = Stream.Read
       Stream.Close
       Stream.Open
       Call Stream.Write(ByteData)
   Case EncodingTypeJpCharCode.UTF8_BOM_NO
       Stream.Position = 0
       Stream.Type = adTypeBinary
       Stream.Position = 3
       ByteData = Stream.Read
       Stream.Close
       Stream.Open
       Call Stream.Write(ByteData)
   End Select
   Call Stream.SaveToFile(FilePath, adSaveCreateOverWrite)
   Stream.Close
End Sub

Public Sub testString_SaveToFile()
   Dim FolderPath As String
   FolderPath = PathCombine( _
       ThisWorkbook.Path, "Test", "ADOStream")
   Call ForceCreateFolder(FolderPath)

   Call String_SaveToFile( _
       "Shift-JIS ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_Shift-JIS.txt"), _
       EncodingTypeJpCharCode.Shift_JIS)

   Call String_SaveToFile( _
       "UTF-16LE-BOM ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-16LE-BOM.txt"), _
       EncodingTypeJpCharCode.UTF16_LE_BOM)
   Call String_SaveToFile( _
       "UTF-16LE-BOM-NO ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-16LE-BOM-NO.txt"), _
       EncodingTypeJpCharCode.UTF16_LE_BOM_NO)

   Call String_SaveToFile( _
       "UTF-16BE-BOM ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-16BE-BOM.txt"), _
       EncodingTypeJpCharCode.UTF16_BE_BOM)
   Call String_SaveToFile( _
       "UTF-16BE-BOM-NO ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-16BE-BOM-NO.txt"), _
       EncodingTypeJpCharCode.UTF16_BE_BOM_NO)

   Call String_SaveToFile( _
       "UTF-8-BOM ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-8-BOM.txt"), _
       EncodingTypeJpCharCode.UTF8_BOM)
   Call String_SaveToFile( _
       "UTF-8-BOM-NO ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-8-BOM-NO.txt"), _
       EncodingTypeJpCharCode.UTF8_BOM_NO)

   Call String_SaveToFile( _
       "JIS ISO-2022-JP ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_JIS.txt"), _
       EncodingTypeJpCharCode.JIS)

   Call String_SaveToFile( _
       "EUC-JP ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_EUC-JP.txt"), _
       EncodingTypeJpCharCode.EUC_JP)

   Call String_SaveToFile( _
       "UTF-7 ＡＢＣ１２３", _
       PathCombine(FolderPath, "test_UTF-7.txt"), _
       EncodingTypeJpCharCode.UTF_7)

End Sub
